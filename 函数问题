
return不是必须的，没有的话返回值默认为nil
函数副作用
闭包



函数定义就相当于给变量赋予了一个函数作为变量值。应用函数变量。
    
8. 就像使用变量前应该先赋值。函数名也是变量名。任何函数都是要先定义后使用的。我们从来没有定义过print函数但是却可以直接使用print函数。这是因为Lua虚拟机自动为我们定义了这个函数。这类函数称为预定义函数。
9. 除了print，Lua还提供了很多其他函数。这些函数可以分为两类
    * 基础函数：例如print。这类函数的函数名就是一个标识符。
    * 模块函数：这类函数调用时，函数名称的位置上分为两部分。第一部分一般是模块名，第二部分是函数名。两部分之间一般通过句点或冒号链接。后续会对这部分函数做介绍。


函数副作用

 * 例子中的addSomething函数定义中嵌套了一个addFun函数的定义。对于一些返回函数作为返回值的函数来说，要返回的函数定义在自身的定义内部还是外部是没什么影响的。但是这个例子中是有影响的。因为内层函数（要作为返回值的函数）定义中用到了外层函数中的变量x。这涉及到一种名叫“闭包”的机制。
    * “闭包”将会在后续涉及到。这里简单提一句，虽然闭包是很多支持函数式编程语言的特性。但是这个机制却用到了副作用。也就是说函数在运行过程中改变了外部变量的值（这里的x是外层函数的变量，但是却可以被内层变量访问甚至修改。）所以个人认为，闭包可以作为一种多范式语言中，和函数式编程相关的编程工具。但是由于基于副作用，并不推荐在纯函数式编程中使用。
    * 注意，函数定义语句对于函数名来说就像赋值语句。即使之前这个变量名没有被使用过，经过函数定义后它也被赋予了一个函数作为值——它的值不再是定义之前的nil。

函数的输入输出作用
9. 之前介绍的print也是预定义函数。而且由于属于最基础的预定义函数模块，它的名字中不需要模块名和句点。

符号和语法
2. 解决这个问题之前我先来梳理一下Lua源码中一些和字符有关的概念。
    * 可用字符：可以出现在源码中的字符。如果使用了不在可用字符集之内的字符会被认为是错误的代码。一般来说Lua源码中允许出现ASCII字符集中的可打印字符以及换行符、水平制表符。由于现在国际化，也允许在字符串字面值中直接出现Unicode字符。 

首先说一下变量的产生，目前我们了解了两种给变量赋值的方法
一种是使用=
一种是使用函数定义（相当于赋值加匿名函数定义）

注意函数定义表达式可以不写函数名
function (x) return x+2 end
每个函数表达式都会返回一个函数

由于lua的匿名函数机制，甚至可以舍弃变量，当作lambda表达式使用

f=function (y) return function (x) return x+y end end
g=f(3)
g(6)

闭包原来是指函数的符号运算中的自由变量符号限定
很多地方是指用变量机制模拟函数式中的符号运算的过程中产生的变量存储空间回收和访问权限问题。

本地变量
函数形参 