太玄的Lua编程语言课

本教程已托管到Github：https://github.com/TaiXuan91/TXLuaLesson

# 0Xeee
## 前置知识
## 正文
## 后续推荐

## 闲谈

add xx to yy
把xx加到yy中

minor changes
小修改

模块是一个专门的Stage,需要前置是Stage4理解函数,Stage5表结构
数据结构是一个专门的模块.用表结构实现其他.

动态代码编译
(Stage3字符串处理 and Stage4理解函数)
Stage7模块
0X30模块调用
0X31模块编写
0X32模块搜寻


旁路分支
0X34获取系统时间 0X36时间间隔
0X35获取随机数
0X3D字符串压缩

Stage8正则表达式
0X37搜寻字符串
0X38字符类
0X39长度匹配
0X3A捕获和其他

Stage9虚拟机和文件
0X3B命令行参数
0X3C系统工具函数

分支
0X3E简单输入输出流 0X3F文件模型 *0X40读取文件
内存管理,编译原理


合并分支
动态代码

下一阶段
线程

异常处理

debug


分为两支:
文件和io
动态编译基础

先介绍动态编译.
然后介绍文件的基本操作
混合io函数一块说

顺便说说文件知识
文本文件
标准输入输出流

后继异常处理
debug
讲一点内存管理

独立Lua和Lua调用bash命令

独立lua的相关内容(命令行参数等)

垃圾回收和弱表

异常处理
pcall,xpcall

后继面向对象编程(独立分支)
(后继递归)
后继表的遍历
for和后边的遍历,结合表来介绍.

map
表是一种构建新类型的方法(函数也是)

为lua建立类型检查系统
任意精度数和分数,带根号形式
符号运算等

lua线性代数支持

文件读写(io和file的函数全部重新介绍)
(io.write和print的区别)


面向对象编程(表作为对象,表加闭包实现面向对象 )(函数加冒号定义和函数加冒号定义)
函数式编程(用三元表达式和递归,替换流程控制的功能)(用尾递归减少内存消耗)

本课程的整体后继
代数和符号运算

函数式编程
lambda表达式
屠龙之技

next和ipair,pairs

函数式编程,函数取代流程控制.

从源码安装lua

严格的语法表述

BNF嵌入到Lua中介绍.

广义比较
元表
以后很多演示代码就不放在文本里.而是写成lua文件(加注释).专门有一个放源码的文件夹.
#正则表达式(另外弄一个专题)
#面向对象特性(另外弄一个专题)
#函数式编程,lambda表达式,用lambda表达式替代流程控制和值(另外弄一个专题)
#BNF和严格的Lua语法(另外弄一个专题)
#数据结构(另外弄一个专题)
#线程和并发技术(另外弄一个专题)
#做个小专题,随机数和伪随机算法
#做个小专题lua中的遍历机制详解
#编程语言范式(在学完BNF之后,回顾一下.表达式,函数,字面值,流程控制,异常处理,数据结构,类型系统)
更多格式还不能发.应该先把后续的两章给定下来.
模块

lua语言的编译
lua和C的交互

C语言

zsh
gcc
gdb
emacs

lua拓展和包管理

独立使用的lua虚拟机的命令行参数
luac的使用

符号和语法
2. 解决这个问题之前我先来梳理一下Lua源码中一些和字符有关的概念。
    * 可用字符：可以出现在源码中的字符。如果使用了不在可用字符集之内的字符会被认为是错误的代码。一般来说Lua源码中允许出现ASCII字符集中的可打印字符以及换行符、水平制表符。由于现在国际化，也允许在字符串字面值中直接出现Unicode字符。 


技巧
不需要的变量可以用_占位接受

例如
position,_=string.find('abbbbbcen','b*')